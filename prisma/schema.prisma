datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id
  name          String
  email         String      @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Birthday      DateTime?
  sessions      Session[]
  accounts      Account[]
  passkeys      Passkey[]
  todos         Todo[]      @relation("UserTodos")
  sharedTodos   TodoShare[] @relation("UserSharedTodos")
  Todo          Todo[]
  TodoShare     TodoShare[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
}

model Todo {
  id        String  @id @default(cuid())
  title     String
  completed Boolean @default(false)

  userId String
  owner  User   @relation("UserTodos", fields: [userId], references: [id], onDelete: Cascade)

  shares TodoShare[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@map("todo")
}

model TodoShare {
  id     String @id @default(cuid())
  todoId String
  userId String
  role   String // z.B. "viewer", "editor", "owner"

  todo Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)
  user User @relation("UserSharedTodos", fields: [userId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id])

  @@unique([todoId, userId]) // jeder User nur einmal pro Todo
}
